##### 설정 매뉴얼
# https://docs.spring.io/spring-boot/docs/2.7.18/reference/htmlsingle/#application-properties

##### 서버 관리
server:
  shutdown: graceful
  error:
    include-message: always
    include-stacktrace: never

  ### 내장 WAS 관리
#  port: 8090
  servlet:
    encoding.force: true
#    jsp.init-parameters.development: true
    ### 컨텍스트 경로 (기본값: /)
#    context-path: /${spring.config.name}
    ### 세션 타임 아웃 (기본값: 30m)
#    session.timeout: 30m
  tomcat:
    additional-tld-skip-patterns: "*.jar"
    basedir: ${app.logs.basedir}
    accesslog:
      enabled: true
      directory: ${app.logs.path}
      prefix: ${spring.config.name}_access
      pattern: "%{yyyy-MM-dd HH:mm:ss.SSS}t %h \"%r\" %s (%D ms)"
      max-days: ${logging.logback.rollingpolicy.max-history}
      condition-unless: noAccessLog
    threads.max: 200
#    accept-count: 100
    use-relative-redirects: true
    remoteip:
      remote-ip-header: x-forwarded-for
      protocol-header: x-forwarded-proto

##### 스프링 관리
spring:
  main:
#    web-application-type: none
  config.name: common
  main.banner-mode: off
  devtools.restart.enabled: false
  pid:
    file: ${spring.config.name}.pid
    fail-on-write-error: true
  jackson:
    mapper.DEFAULT_VIEW_INCLUSION: true
    deserialization.FAIL_ON_UNKNOWN_PROPERTIES: false
    default-property-inclusion: NON_NULL

  ### 실행 환경 관리 (local:로컬, test:테스트, beta/dev:개발, stage:김증, prod:운영 서버)
#  profiles.active: local

  ### 쓰레드/스케쥴러 풀 관리
  task:
#    execution.pool:
#      core-size: 20
#      max-size: 40
#      queue-capacity: 100
#      keep-alive: 60s
    scheduling.pool.size: 10

  ### DB 관리
#  sql.init.mode: always
  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
#    driver-class-name: org.h2.Driver
#    driver-class-name: org.mariadb.jdbc.Driver
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    driver-class-name: org.postgresql.Driver

#    url: jdbc:h2:./db/ds_common
    url: jdbc:log4jdbc:h2:tcp://localhost/./db/ds_common
#    url: jdbc:mariadb://localhost:3306/ds_common?rewriteBatchedStatements=true
#    url: jdbc:mariadb[:sequential/loadbalance]://localhost:3306,127.0.0.1:3306/ds_common?rewriteBatchedStatements=true
#    url: jdbc:mysql://localhost:3306/ds_common?rewriteBatchedStatements=true&autoReconnect=true&characterEncoding=UTF-8&serverTimezone=Asia/Seoul
#    url: jdbc:postgresql://localhost:5432/oh-common?rewriteBatchedInserts=true&currentSchema=ds_common

    username: common
    password: 1234567890
    hikari:
      ### DBCP 최대 크기 (기본값: 10)
#      maximum-pool-size: 20
      ### DBCP 커넥션 타임 아웃 (기본값: 30초)
#      connection-timeout: 5000

  ### JPA 관리
  data.web.pageable.one-indexed-parameters: true
  jpa:
#    hibernate.ddl-auto: update
#    defer-datasource-initialization: true
    properties.hibernate:
      dialect: org.hibernate.dialect.H2Dialect
#      dialect: org.hibernate.dialect.MariaDBDialect
#      dialect: org.hibernate.dialect.MySQL8Dialect
#      dialect: org.hibernate.dialect.PostgreSQLDialect
      default_batch_fetch_size: 500
      jdbc.batch_size: 500
      order_inserts: true
      order_updates: true
#    hibernate.naming.physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

  ### H2 DB 관리
  h2.console:
    enabled: true
    path: /db
    settings.web-allow-others: true

  ### 메일 서버 관리
  mail:
    host: smtp.gmail.com
    username: dsbct1
    password:
    properties.mail.smtp:
      auth: true
      port: 465
      ssl.enable: true
      starttls.enable: false

  ### 데이터 그리드 관리
#  hazelcast.config: file:hazelcast-${spring.profiles.active}.yaml

  ### 템플릿 엔진 관리
  thymeleaf:
    # thymeleaf 단독 사용
#    prefix: classpath:/templates
    # jsp 와 thymeleaf 를 같이 사용
    prefix: classpath:/
    view-names: templates/*

  ### JSP 관리
  mvc.view:
    prefix: /WEB-INF/views/
    suffix: .jsp

  ### 업로드 파일 크기 제한
  servlet.multipart:
#    max-file-size: 10MB
#    max-request-size:  100MB

  ### 자동 설정 비활성화
  autoconfigure.exclude:
#    - org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration
#    - org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration
#    - org.springframework.boot.autoconfigure.session.SessionAutoConfiguration

#    - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
#    - org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration

#    - org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration
#    - org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration

#    - org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration
#    - org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration

#    - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

##### 스프링 문서 관리
# https://springdoc.org/v1/#springdoc-openapi-core-properties
springdoc:
#  api-docs:
#    enabled: false
#  paths-to-exclude:
#    - /v1/sample/**
  ### 주의) 조회시 에도 Bean Validation(JSR-303)이 적용됨
#  default-flat-param-object: true
  swagger-ui:
    tagsSorter: alpha
    operationsSorter: alpha
    docExpansion: none
    path: /api
#    supportedSubmitMethods: get
#    showCommonExtensions: true

##### 로깅 레벨 관리
#debug: true
#trace: true

##### 로그 저장 안함 (외장 WAS 사용시)
#server.tomcat.accesslog.enabled: false
#logging.file.name:

##### 로깅 관리
logging:
  file:
    name: ${app.logs.full-path}/${spring.config.name}.log
  logback:
    rollingpolicy:
#      clean-history-on-start: true
      max-file-size: 300MB
      max-history: 30
      total-size-cap: 10GB
      file-name-pattern: ${app.logs.full-path}/${spring.config.name}_%d{yyyy-MM-dd}_%i.log
  pattern:
    console: "%d %-5p [%t] %M\\(%F:%L\\) %m%n"
    file: ${logging.pattern.console}
  level:
    jdbc.audit: off
    jdbc.connection: off
    jdbc.sqlonly: off
    jdbc.sqltiming: INFO
    jdbc.resultset: off
    jdbc.resultsettable: info
#    org.hibernate.SQL: debug
#    org.hibernate.type.descriptor.sql.BasicBinder: trace
#    org.hibernate.resource.jdbc.internal.ResourceRegistryStandardImpl: trace
    org.springframework.jdbc.datasource.init.ScriptUtils: debug
#    org.springframework.cache: trace
#    org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver: error

    # -Dcom.zaxxer.hikari.housekeeping.periodMs=1000
#    com.zaxxer.hikari: debug
#    org.apache.http.impl.conn.PoolingHttpClientConnectionManager: debug
    com.hazelcast.internal.diagnostics.HealthMonitor: warn

    org.oh: debug
    org.oh.common.mapper: info
    org.oh.sample.mapper: info

##### SQL 매퍼 관리
mybatis:
  mapper-locations: mapper/${app.mapper.vendor}/**/*.xml
#  type-aliases-package: org.oh.sample.model
  configuration:
    map-underscore-to-camel-case: true
#    call-setters-on-nulls: true

##### 공통 관리
common:
  ### 메인 클래스(CommonApplication) 실행 여부 (기본값: false)
  enabled: true

  ### API 사용 여부
  api:
    ### SPA(Single Page Application) UI 내장 여부 (기본값: false)
    spa.enabled: true
    ### 데이터(데이터 그리드 사용) CRUD API(DataRestController) 사용 여부 (기본값: false)
    data.enabled: true
    ### 데이터(데이터 베이스 사용) CRUD API(DataDbRestController) 사용 여부 (기본값: false)
    dataDb.enabled: true
    ### 샘플 CRUD API(FilesDbRestController, SampleDbRestController, SampleMapperRestController, SampleRestController, TestController) 사용 여부 (기본값: false)
    sample.enabled: true

  ### 로깅 관리 확장
  logs:
    ### 모든 시스템 설정 출력 여부 (기본값: false)
    properties: true
    ### 모든 빈 정보 출력 여부 (기본값: false)
#    beans: true
    api:
      # API 정보 로깅의 최대 크기 (기본값: 50 bytes)
      max-size: 10_000
      # API 요청 정보 로깅 여부
      request-enabled: true
      # API 응답 정보 로깅 여부
#      response-enabled: true

  ### Apache-Tomcat AJP 연계
  tomcat.ajp:
#    port: 8009
#    address: localhost

  ### (비)동기 HTTP Client
  http-client:
    default: &http-client-default
      ### HTTP 클라이언트 공급 업체 (httpComponents(defalut)/okHttp/simple)
      vendor: httpComponents
      ### HTTP 최대 커넥션 시간 (초)
      connect-timeout-sec: 2
      ### HTTP 최대 응답 시간 (초)
      read-timeout-sec: 10
      ### HTTP 최대 커넥션 갯수
      max-conn-total: ${server.tomcat.threads.max}
      ### HTTP URL 당 최대 커넥션 갯수
      max-conn-per-route: ${common.http-client.default.max-conn-total}
    sample:
      <<: *http-client-default
      max-conn-total: ${server.tomcat.threads.max}
      max-conn-per-route: ${common.http-client.sample.max-conn-total}

  ### API 보안 관리
  security:
    ### 사용 여부 (기본값: false)
    ### true  : [표준] 성능이 느린 웹 표준 토큰 사용 (JWT)
    ### false : [비표준] 성능이 빠른 일반 암호화 토큰 사용 (AES256), 경로에 패턴 사용 불가
    enabled: true
    ### API 사용 여부
    api:
      ### 공통(로그인/토큰 발급) API(CommonRestController) 사용 여부 (기본값: false)
      enabled: true
      ### 공통(권한) 테스트 API(CommonRestController.TestRestController) 사용 여부 (기본값: false)
      test.enabled: true
    ### 토큰 관리
    token:
      ### 토큰 생성 암호 (64 byte = 512 bit)
      secret: 1234567890123456789012345678901234567890123456789012345678901234
      ### 기본 토큰 만료 시간 (분, 기본값: 4시간)
#      expire-time-min: 240
    ### 권한 상속 체계 (기본값: ROLE_ADMIN > ROLE_MANAGER > ROLE_USER)
#    role-hierarchy: ROLE_ADMIN > ROLE_MANAGER > ROLE_USER

    ### 주의)
    ### - 지정시 범위가 작은 것부터 순서 대로 설정 (필터 개념)
    ### - 같은 성격을 같은 경로로 설정하면 마지막 설정이 적용
    ###   예) include.api-paths: - /v*/**, ...
    ###       exclude.api-paths: - /v*/**, ...
    ### 보안 포함(차단) 경로
    include:
      ### CORS(Cross Origin Resource Sharing/교차 출처 자원 공유) 출처 (적용 url: /**)
      cors-origins:
#        - https://*.domain1.com:[8080,8081]
        - http://localhost:8080
#        - *
      ### 5. API 경로 (기본값: path, ALL, hasRole('USER'))
      api-paths:
#        - /v*/common/manager, ALL, hasRole('MANAGER')
        - /v*/common/admin, ALL, hasRole('ADMIN')
        - /v*/**
        # 비표준 보안 적용
#        - /v1/

    ### 보안 제외(허용) 경로
    exclude:
      ### 1. 웹 경로
      web-paths:
#        - /html/**
      ### 2. CSRF(Cross Site Request Forgery/사이트 간 요청 위조) 경로 (기본값: /**)
      csrf-paths:
#        - /v*/test/**
#        - /**
      ### 3. API 경로 (기본값: /**, ALL, permitAll)
      api-paths:
        # 보안 무시 (개발용)
#        - /v1/test/**
#        - /**
        # 비표준 보안 적용
#        - /v1/common/login
#        - /v1/did/
#        - /v1/didDoc

        - /v*/api-docs/**
        - /v*/common/login
#        - /v*/**/cvs, GET
#        - /v*/files/view/**, GET
#        - /v*/files/down/**, GET

#        - /v*/common/admin/**, ALL, hasIpAddress('127.0.0.1') or hasIpAddress('0:0:0:0:0:0:0:1')
      ### 4. IP 경로
      ip-paths:
#        - path: /v*/common/admin/**
#          ips:
#            - 127.0.0.1
#            - 0:0:0:0:0:0:0:1

    ### 기본 사용자 관리
    ### DB 사용자 테이블 연계 : {@link org.oh.common.security.DBUserDetailsService}
    default-users:
      - &default-user
        id: user
        password: $2a$10$xa6J5T.ijRg0IOkZGtgWIOfHzncyVPrJg/INZJ8RIjF30YyXnIsxu
        state: ACTIVE
        roles: ROLE_USER
      - <<: *default-user
        id: manager
        roles: ROLE_MANAGER
      - <<: *default-user
        id: admin
        roles: ROLE_ADMIN
    ### 추가 사용자 관리
    append-users:

  ### 데이터 그리드 관리
  data-grid:
    ### 사용 여부 (기본값: false)
    enabled: true
    session:
      ### 세션 사용 여부 (기본값: false)
      enabled: true

  ### JPA 관리
  jpa:
    ### 사용 여부 (기본값: false)
    enabled: true

  ### API 문서(스웨거) 관리
  api-doc:
    title: Common(공통) API
    description: Apis provided by blockchain development team
    version: x.x.x
    email: skoh38@gmail.com
    ### 실행 URL (프록시 등으로 자동 설정이 안될 경우 사용)
#    url: http://localhost:8080

  ### 파일 저장소 관리
  files:
    ### 최상위 디렉토리 경로
#    rootPath: files
    ### 썸네일 이미지 생성 여뷰 (기본값: false)
#    thumbnail: true
    ### 클러스터에 복사 여뷰 (기본값: false)
#    copy-to-cluster: true

  ### 메일 관리
  mail:
    ### 보낸 사람 이메일
    from: dsbct1@gmail.com

  ### 요쳥 관리
  request:
    ### 요청문 최대 크기
#    limit-size-bytes: 1_000_000

  ### 스케쥴 관리
  schedule:
    ### 스케쥴 이중화 저장소 (DG: 데이터 그리드, DB: 데이터 베이스, NONE: 사용안함, 기본값: NONE)
    save-to: DG

##### 어플 관리
app:
  ### 로그 관리
  logs:
    ### 로그 기준(상위) 경로 (예: /home/skoh)
    basedir: .
    ### 로그 파일 경로 (예: logs)
    path: logs
    full-path: ${app.logs.basedir}/${app.logs.path}

  ### SQL 매퍼 벤더 (h2/mysql/postgresql)
  mapper.vendor: h2

  ### 스케쥴 관리
  schedule:
    ### 전체 스케쥴 활성화 여부 (기본값: false)
#    enabled: true
    sample:
      ### 스케쥴 활성화 여부 (기본값: false)
      enabled: true
      ### 스케쥴 반복 주기
      cron: "*/10 * * * * *"
      ### 헬쓰 체크 시간 (기본값: cron반복주기+(cron반복주기/2)초, 음수이면 사용안함)
      health-check-time-sec: 15
      ### 페이지당 사이즈 (기본값: 1,000)
#      page-size: 1000
      ### 쓰레드 수 (기본값: 1)
      ### - ${spring.task.execution.pool.max-size} 보다 작게 설정
#      thread-size: 1
